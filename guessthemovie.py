{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.10","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2021-10-18T10:15:00.218873Z","iopub.execute_input":"2021-10-18T10:15:00.219998Z","iopub.status.idle":"2021-10-18T10:15:00.250032Z","shell.execute_reply.started":"2021-10-18T10:15:00.219893Z","shell.execute_reply":"2021-10-18T10:15:00.249170Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"import random\nmovies=['anand','drishyam','nayakan','anbe sivam','gol maal','vikram vedha','black friday','dangal','manichithrathazhu','taare zameen par']\ndef create_question(movie):\n    n=len(movie)\n    letters=list(movie)\n    temp=[]\n    for i in range(n):\n        if letters[i]==' ':\n            temp.append(' ')\n        else:\n            temp.append('*')\n    qn=''.join(str(x) for x in temp)\n    return qn\ndef is_present(letter,movie):\n    c=movie.count(letter)\n    if c==0:\n        return False\n    else:\n        return True\ndef unlock(qn,movie,letter):\n    ref=list(movie)\n    qn_list=list(qn)\n    temp=[]\n    n=len(movie)\n    for i in range(n):\n        if ref[i]==' ' or ref[i]==letter:\n            temp.append(ref[i])\n        else:\n            if qn_list[i]=='*':\n                temp.append('*')\n            else:\n                temp.append(ref[i])\n    qn_new=''.join(str(x) for x in temp)\n    return qn_new\np1name=input('Player1! Enter your name: ')\np2name=input('Player2! Enter your name: ')\npp1=0\npp2=0\nturn=0\nwilling=True\nwhile willing:\n    if turn%2==0:\n        print(p1name,' your turn ')\n        picked_movie=random.choice(movies)\n        qn=create_question(picked_movie)\n        print(qn)\n        modified_qn=qn\n        not_said=True\n        while not_said:\n            letter=input('Your letter: ')\n            if(is_present(letter,picked_movie)):\n                modified_qn=unlock(modified_qn,picked_movie,letter)\n                print(modified_qn)\n                d=print('Press 1 to guess movie and 2 to unlock letter: ')\n                if(d==1):\n                    ans=input('Your answer: ')\n                    if(ans==picked_movie):\n                        pp1=pp1+1\n                        print('Correct')\n                        not_said=False\n                        print(p1name,' your score is: ',pp1)\n                    else:\n                        print('Wrong answer. Try again')\n            else:\n                print(letter,' not found')\n        c=input('Press 1 to continue or 0 to quit')\n        if(c==0):\n            print(p1name,' your score ',pp1)\n            print(p2name,' your score ',pp2)\n            print('Thanks for playing')\n            print('Have a nice day')\n            willing=False\n            \n    else:\n        print(p2name,' your turn ')\n        picked_movie=random.choice(movies)\n        qn=create_question(picked_movie)\n        print(qn)\n        modified_qn=qn\n        not_said=True\n        while not_said:\n            letter=input('Your letter: ')\n            if(is_present(letter,picked_movie)):\n                modified_qn=unlock(modified_qn,picked_movie,letter)\n                print(modified_qn)\n                d=print('Press 1 to guess movie and 2 to unlock letter: ')\n                if(d==1):\n                    ans=input('Your answer: ')\n                    if(ans==picked_movie):\n                        pp2=pp2+1\n                        print('Correct')\n                        not_said=False\n                        print(p2name,' your score is: ',pp2)\n                    else:\n                        print('Wrong answer. Try again')\n            else:\n                print(letter,' not found')\n        c=input('Press 1 to continue or 0 to quit')\n        if(c==0):\n            print(p2name,' your score ',pp2)\n            print(p1name,' your score ',pp1)\n            print('Thanks for playing')\n            print('Have a nice day')\n            willing=False\n            \n    turn=turn+1\n        \nplay()\n            ","metadata":{"execution":{"iopub.status.busy":"2021-10-18T13:21:34.748430Z","iopub.execute_input":"2021-10-18T13:21:34.748794Z"},"trusted":true},"execution_count":null,"outputs":[]}]}